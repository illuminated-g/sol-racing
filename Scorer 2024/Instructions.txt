** Do not edit any of the files in the FormulaG virtual folder as this can make your entry incompatible with the standard engine!

You can get started by running the game with Run Game.vi and ensure everything is working correctly. This projects already starts off with a simple implementation that is capable of completing laps of the race track, albeit much slower than would be possible with better logic.

For this challenge, update the logic in Car Control.vi inside of Controller.lvlib to make it handle turns and faster speeds. This VI is setup as non-reentrant so you're free to use shift registers, feedback nodes, functional globals, and nearly any other mechanism to store state across calls. You can leave Car Control.vi open while running the game to do debugging, tweak your parameters, and see additional visualizations.

Any additional SubVIs or Type Definitions you create to implement your better logic should be added to the Controller.lvlib library so that it gets included in the Submission Zip properly. 

** DO NOT CHANGE THE CONNECTOR PANE OF Car Control.vi

The engine calls the Car Control.vi approximately 25 times a second (40mS period) and you should ensure your code runs efficiently. If a call of Car Control.vi runs longer than about 35mS, the loop rate will be affected and running longer still will affect the responsiveness of the UI. The driving simulation runs at its normal speed regardless of how quickly Car Control.vi runs so all that will happen with a slow Car Control.vi is you'll have less control of the driving.

For more details check out the documentation within Car Control.vi

When you are satisfied with the control implementation, use the Submission Zip build specification to package up your entry to upload to the website. Ensure all files are added to the project so they're properly included in the zip file that is generated.

For any questions be sure to check out the Summer of LabVIEW Discord server at https://discord.gg/KxtUER4NGS